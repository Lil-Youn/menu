// Generated by Xata Codegen 0.25.2. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "menu",
    columns: [
      { name: "monday_starter", type: "string" },
      { name: "monday_main", type: "string" },
      { name: "monday_sweet", type: "string" },
      { name: "tuesday_starter", type: "string" },
      { name: "tuesday_main", type: "string" },
      { name: "tuesday_sweet", type: "string" },
      { name: "wednesday_starter", type: "string" },
      { name: "wednesday_sweet", type: "string" },
      { name: "wednesday_main", type: "string" },
      { name: "thursday_starter", type: "string" },
      { name: "thursday_main", type: "string" },
      { name: "thursday_sweet", type: "string" },
      { name: "friday_starter", type: "string" },
      { name: "friday_main", type: "string" },
      { name: "friday_sweet", type: "string" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Menu = InferredTypes["menu"];
export type MenuRecord = Menu & XataRecord;

export type DatabaseSchema = {
  menu: MenuRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Simon-s-workspace-qf11og.eu-central-1.xata.sh/db/test-database",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient({
    databaseURL: import.meta.env.VITE_XATA_URL,
    apiKey: import.meta.env.VITE_XATA_API_KEY,
    fetch: fetch,
    branch: import.meta.env.VITE_XATA_BRANCH,
    enableBrowser: true,
  });
  return instance;
};
